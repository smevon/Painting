import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;


public class Imagine {
	private char[][] Matrice;
	private int rows;
	private int cols;

	public Imagine(String fileName) {
		try{
		Scanner scanner = new Scanner(new File(fileName));
		
		this.setRows(scanner.nextInt());
		this.setCols(scanner.nextInt());
		Matrice=new char[rows][cols];
		while(scanner.hasNext())
		{
		    for(int i=0;i <rows; i++)
		    {
	    		String line=scanner.next();
		    	for(int j=0;j< cols; j++)
		    	{
		    		Matrice[i][j]=line.charAt(j);
		    	}
		}
		}
		}catch( FileNotFoundException e){
			System.out.println(e.getMessage());
		}
		

	}
	
	

	public int getRows() {
		return rows;
	}

	public void setRows(int rows) {
		this.rows = rows;
	}

	public int getCols() {
		return cols;
	}

	public void setCols(int cols) {
		this.cols = cols;
	}
	public int paintSquare(int R, int C, int S) {
		if (R - S < 0 || R + S >= this.getRows())
			return 0;
		if (C - S < 0 || C + S >= this.getCols())
			return 0;

		try {
			for (int i = R - S; i <= R + S; i++)
				for (int j = C - S; j <= C + S; j++)
					Matrice[i][j] = '#';
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(e.getMessage());
		}
		return 1;
	}
	
		public void paintLine(int R1, int R2, int C1, int C2 ) {
		if (((R1 >= 0 && R1 < this.getRows()) && (R2 >= 0 && R2 < this.getRows()))
			&& ((C1 >= 0 && C1 < this.getCols()) && (C2 >= 0 && C2 < this.getCols())) ){
			//System.out.println("Range bun");
			if (C1 == C2) {
			//	System.out.println("Paint horizontal!");
				if (R1 == R2) {
					Matrice[R1][C1] = '#';
				} else if ( R1 < R2 ) {
					for ( int i = R1; i <= R2; i++) {
						Matrice[i][C1] = '#';
					}//end for
				} else {
					for ( int i = R2; i <= R1; i++) {
						Matrice[i][C1] = '#';
					}//end for
				} // end if
				
			} // end if ( C1 == C2)
			
			if (R1 == R2) {
				//System.out.println("Paint vertical");
				if (C1 == C2) {
					Matrice[R1][C1] = '#';
				} else if ( C1 < C2 ) {
					for ( int i = C1; i <= C2; i++) {
						Matrice[R1][i] = '#';
					}//end for
				} else {
					for ( int i = C2; i <= C1; i++) {
						Matrice[R1][i] = '#';
					}//end for
				} // end if
				
			}
			
		} // end big if ( for range)
	}// end method
	
	
	public void eraseCell(int R, int C) {
		try{
			Matrice[R][C]='.';
		}catch(ArrayIndexOutOfBoundsException e){
			System.out.println(e.getMessage());
		}
	}
	
	public int getHashTag(int miniRow, int miniCols) {
		// returneaza cate HashTag-uri is intr-o parte mai micuta a matricei
		// daca dorim sa ne returneze HashTagurile din matricea totala ii dam ca
		// parametri rows si cols
		int count = 0;
		for (int i = 0; i < miniRow; i++)
			for (int j = 0; j < miniCols; j++) {
				if (Matrice[i][j] == '#')
					count++;
			}
		// System.out.println("nr total de hasthtaguri din parcela respectiva: "
		// + count);
		return count;
	}
	
	public void afisare() {
		for (int i = 0; i < this.getRows(); i++) {
			for (int j = 0; j < this.getCols(); j++)
				System.out.print(Matrice[i][j]);
			System.out.println();
		}
	}
}
